import os
import logging
import json
import openai
import difflib
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters, CommandHandler, CallbackQueryHandler

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è GPT –∫–ª—é—á–∞ —Ç–∞ –ø—Ä–æ–º–ø—Ç–∞
openai.api_key = os.getenv("OPENAI_API_KEY")
SYSTEM_PROMPT = os.getenv("SYSTEM_PROMPT", "–¢–∏ ‚Äî —é—Ä–∏–¥–∏—á–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ª–∏—à–µ –∑–≥—ñ–¥–Ω–æ –∑ –±–∞–∑–æ—é —à–ø–æ—Ä–∏.")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–∑–∏ —à–ø–æ—Ä–∏ –∑ JSON
with open("tdp_answers_full.json", "r", encoding="utf-8") as f:
    answers = json.load(f)

# –°–ø–∏—Å–æ–∫ –∫–ª—é—á—ñ–≤
keys = list(answers.keys())

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥–∞ /topics
async def topics_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(text=keys[i].title(), callback_data=str(i))]
        for i in range(min(30, len(keys)))
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –∑ —à–ø–æ—Ä–∏:", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ç–µ–º
async def handle_topic_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        index = int(query.data)
        key = keys[index]
        data = answers[key]
        reply = f"‚ùì <b>{data['–ø–∏—Ç–∞–Ω–Ω—è']}</b>\n\n‚úÖ {data['–≤—ñ–¥–ø–æ–≤—ñ–¥—å']}"
        if data["–∑–∞–∫–æ–Ω–∏"]:
            reply += "\n\nüìò <b>–ó–∞–∫–æ–Ω(–∏):</b> " + "; ".join(data["–∑–∞–∫–æ–Ω–∏"])
    except (ValueError, IndexError, KeyError):
        reply = "‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏."
    await query.message.reply_text(reply, parse_mode="HTML")

# –û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.lower().strip()

    # –ü–æ—à—É–∫ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ –∫–ª—é—á–∞ —É —Å–ª–æ–≤–Ω–∏–∫—É
    best_match = difflib.get_close_matches(user_message, keys, n=1, cutoff=0.5)

    if best_match:
        data = answers[best_match[0]]
        reply = f"‚ùì <b>{data['–ø–∏—Ç–∞–Ω–Ω—è']}</b>\n\n‚úÖ {data['–≤—ñ–¥–ø–æ–≤—ñ–¥—å']}"
        if data["–∑–∞–∫–æ–Ω–∏"]:
            reply += "\n\nüìò <b>–ó–∞–∫–æ–Ω(–∏):</b> " + "; ".join(data["–∑–∞–∫–æ–Ω–∏"])
    else:
        # GPT fallback
        try:
            client = openai.OpenAI()
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": SYSTEM_PROMPT},
                    {"role": "user", "content": user_message}
                ]
            )
            reply = response.choices[0].message.content
        except Exception as e:
            reply = "üîç –ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É —à–ø–æ—Ä—ñ, —ñ GPT –Ω–µ –∑–º—ñ–≥ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏."

    await update.message.reply_text(reply, parse_mode="HTML")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    telegram_token = os.getenv("TELEGRAM_TOKEN")
    if not telegram_token:
        raise ValueError("TELEGRAM_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!")

    app = ApplicationBuilder().token(telegram_token).build()
    app.add_handler(CommandHandler("topics", topics_command))
    app.add_handler(CallbackQueryHandler(handle_topic_callback))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—é –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è...")
    app.run_polling()
